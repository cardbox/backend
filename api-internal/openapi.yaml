openapi: 3.0.2
info:
  title: Cardbox API Internal
  description: API for the main frontend application.
  version: 0.1.0
externalDocs:
  description: Source code
  url: https://github.com/cardbox/backend/tree/master/api-internal
servers:
  - url: http://localhost:9020/
  - url: https://cardbox.local/api/internal
  - url: https://cardbox.sova.dev/api/internal

paths:
  /accesso/auth.done:
    post:
      summary: Redirect endpoint
      operationId: authDone
      tags: [ Auth ]
      description: |-
        Redirect endpoint
      requestBody:
        content:
          application/json:
            schema:
              properties:
                authorizationCode:
                  type: string
                  description: Authorization code
      responses:
        200:
          $ref: "#/components/responses/AuthDoneSuccess"
        401:
          $ref: "#/components/responses/AuthDoneFailed"
        500:
          description: "Something went wrong"
  /accesso/auth.params:
    post:
      summary: Get auth params
      operationId: authParams
      tags: [ Auth ]
      description: |-
        Get accesso auth url
      requestBody:
        content:
          application/json:
            schema:
              properties:
                state:
                  type: string
                  description: oauth state
      responses:
        200:
          $ref: "#/components/responses/AuthUrlSuccess"
        500:
          description: SERVER_ERROR

  /cards.search:
    post:
      summary: Search all cards
      operationId: cardsSearch
      tags: [ Cards ]
      description: |-
        Full text search of cards
          - `POST /api/internal/cards.search '{"search": SEARCH_TERM}'`
          - By title, content, tags (and maybe by author)
      requestBody:
        content:
          application/json:
            schema:
              required: [ query ]
              properties:
                query:
                  type: string
                  description: Search term
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                required: [cards, total, users]
                properties:
                  cards:
                    type: array
                    items:
                      $ref: '#/components/schemas/Card'
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  total:
                    type: integer
        500:
          description: Server error

  /cards.list:
    post:
      summary: Get cards list
      operationId: cardsList
      tags: [ Cards ]
      description: |-
        1. **Personal cards**
            - `POST /api/v1/card/list`
        2. **Cards of user**
            - `POST /api/v1/card/list '{"authorId": USER_ID}'`

        - `TODO:` Add pagination later

        - `TODO:` Maybe there is should be OData-like format instead of partial params

        - `TODO:` Add later access control for card by it's visibilty and user permissions
      requestBody:
        content:
          application/json:
            schema:
              properties:
                authorId:
                  type: string
                  format: uuid
                  description: Author id
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                required: [cards, total]
                properties:
                  cards:
                    type: array
                    items:
                      $ref: '#/components/schemas/Card'
                  total:
                    type: integer
        400:
          description: CLIENT_ERROR
          content:
            application/json:
              schema:
                required: [error, code]
                properties:
                  error:
                    type: boolean
                  code:
                    type: string
                    enum:
                      - invalid_params
                      - unauthorized
        500:
          description: SERVER_ERROR
  /cards.get:
    post:
      summary: Get card
      operationId: cardsGet
      tags: [ Cards ]
      requestBody:
        content:
          application/json:
            schema:
              required: [cardId]
              properties:
                cardId:
                  type: string
                  format: uuid

      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                required: [card]
                properties:
                  card:
                    $ref: '#/components/schemas/Card'
        400:
          description: CLIENT_ERROR
          content:
            application/json:
              schema:
                required: [error, code]
                properties:
                  error:
                    type: boolean
                  code:
                    type: string
                    enum:
                      - card_not_found
        500:
          description: SERVER_ERROR
  /cards.create:
    post:
      tags: [ Cards ]
      summary: Create card
      operationId: cardsCreate
      requestBody:
        description: |-
          - author = AuthToken
          - createdAt = DateTime.Now()
          - updatedAt = DateTime.Now()
        content:
          application/json:
            schema:
              required: [title, content]
              properties:
                title:
                  type: string
                content:
                  type: object
                tags:
                  type: array
                  items:
                    type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                required: [card]
                properties:
                  card:
                    $ref: '#/components/schemas/Card'
        400:
          description: CLIENT_ERROR
          content:
            application/json:
              schema:
                required: [error]
                properties:
                  error:
                    type: string
                    enum:
                      - empty_title
                      - invalid_content
        500:
          description: SERVER_ERROR
  /cards.edit:
    post:
      tags: [ Cards ]
      summary: Update card
      description: |-
        `IMPORTANT:` There is should be check that user has required permissions for editing card
          - **For prototype**: that he is card's author
      operationId: cardsEdit
      requestBody:
        description: |-
          - Not all properties are required (title, content, tags)
          - author = AuthToken
          - createdAt = DateTime.Now()
          - updatedAt = DateTime.Now()
        content:
          application/json:
            schema:
              required: [cardId]
              properties:
                cardId:
                  type: string
                  format: uuid
                title:
                  type: string
                content:
                  type: object
                tags:
                  type: array
                  items:
                    type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                required: [card]
                properties:
                  card:
                    $ref: '#/components/schemas/Card'
        400:
          description: CLIENT_ERROR
          content:
            application/json:
              schema:
                required: [error]
                properties:
                  error:
                    type: string
                    enum:
                      - card_not_found
                      - invalid_payload
                      - no_access
        500:
          description: SERVER_ERROR
  /cards.delete:
    post:
      tags: [ Cards ]
      summary: Delete card
      operationId: cardsDelete
      requestBody:
        content:
          application/json:
            schema:
              required: [cardId]
              properties:
                cardId:
                  type: string
                  format: uuid
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                required: [cardId]
                properties:
                  cardId:
                    type: string
                    format: uuid
        400:
          description: CLIENT_ERROR
          content:
            application/json:
              schema:
                required: [error]
                properties:
                  error:
                    type: string
                    enum:
                      - card_not_found
                      - no_access
        500:
          description: SERVER_ERROR
  /cards.save:
    post:
      tags: [ Cards ]
      summary: Add card to favorites
      operationId: cardsSave
      requestBody:
        content:
          application/json:
            schema:
              required: [cardId]
              properties:
                cardId:
                  type: string
                  format: uuid
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
        400:
          description: CLIENT_ERROR
          content:
            application/json:
              schema:
                required: [error, code]
                properties:
                  error:
                    type: boolean
                  code:
                    type: string
                    enum:
                      - already_saved
                      - card_not_found
                      - no_access
        500:
          description: SERVER_ERROR
components:
  responses:
    AuthDoneFailed:
      description: Failed to authorize
      content:
        application/json:
          schema:
            required: [ error ]
            properties:
              error:
                type: string
                enum:
                  - "accesso_failed"
                  - "try_later"
    AuthDoneSuccess:
      description: ""
      content:
        application/json:
          schema:
            required: [ userInfo ]
            properties:
              userInfo:
                $ref: "#/components/schemas/UserInfo"
    AuthUrlSuccess:
      description: ""
      content:
        application/json:
          schema:
            required: [ accessoUrl ]
            properties:
              accessoUrl:
                type: string
                description: Accesso Url
  schemas:
    UserInfo:
      type: object
      required: [ firstName, lastName ]
      properties:
        firstName:
          type: string
        lastName:
          type: string
    User:
      type: object
      required: [id, username, firstName, lastName, bio, avatar]
      properties:
        id:
          type: string
          format: uuid
          description: ID
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        bio:
          type: string
          nullable: true
        avatar:
          type: string
          nullable: true
          description: |-
            Later, can implement as `File` entity
        socials:
          type: object
          properties:
            github:
              type: string
              nullable: true
            devto:
              type: string
              nullable: true
            twitter:
              type: string
              nullable: true
        work:
          type: string
          nullable: true
          description: |-
            Later, can implement as `Work` entity
        roles:
          type: array
          items:
            type: string
          nullable: true
          deprecated: true
          description: |-
            Later, can implement checking user permissions by `Role` entity
    Card:
      type: object
      required: [id, content, title, createdAt, updatedAt, author, tags]
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        content:
          type: object
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        authorId:
          type: string
          format: uuid
          description: Author user uuid
        tags:
          type: array
          items:
            type: string
          description: |-
            Later, we can create `Tag` entity 
        summary:
          type: string
          nullable: true
          deprecated: true
          description: |-
            Later, we can add this field
            For custom text-overflow (instead of truncating with emphasizing)
          
